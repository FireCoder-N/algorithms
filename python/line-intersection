def segment_intersection(v1, v2, v1_prime, v2_prime):
    
    # v1, v2, v1', v2' are 2d points (x,y).
    # Their type can be a list, tuple,  numpy array, ...
    #* returns: either None if there is no intersection or the intersection point as a list [x,y]
    
    #line equation: Ax + By + C = 0
    
    # compute line 1 (through points v1, v2):
    if v1[0] == v2[0]:
        # x = const
        A = 1
        B = 0
        C = v1[0]
    else:
        # y = ax+b
        A = (v2[1]-v1[1])/(v2[0]-v1[0])
        B = -1
        C = v2[1] - A*v2[0]

    # compute line 2 (through points v1', v2'):
    if v1_prime[0] == v2_prime[0]:
        # x = const
        A_prime = 1
        B_prime = 0
        C_prime = v1_prime[0]
    else:
        # y = ax+b
        A_prime = (v2_prime[1]-v1_prime[1])/(v2_prime[0]-v1_prime[0])
        B_prime = -1
        C_prime = v2_prime[1] - A_prime*v2_prime[0]

    # solve the system:
    # [A  B ][x] = [-C ]
    # [A' B'][y] = [-C']
    # using Crammer's rule. (https://en.wikipedia.org/wiki/Cramer%27s_rule)
    
    # 2x2 determinant
    def det(a, b, c, d):
        #[a b]
        #[c d]
        return a*d - c*b
    
    D = det(A, B, A_prime, B_prime)
    
    # if D=0 the system  has no unique solution or has infinitely many solutions.
    if D == 0:
       return None
    
    Dx = det(-C, B, -C_prime, B_prime)
    Dy = det(A, -C, A_prime, -C_prime)

    # intersection of two lines
    x = Dx / D
    y = Dy / D

    #// print(f"v1: {v1}, v2: {v2}\nv1': {v1_prime}, v2': {v2_prime}\nintersection: {(x,y)}")
    
    # ----- delete the if statement in case you need the intersection of lines rather than line segments ----- 

    # check if intersection point is within line segments
    if (min(v1[0],v2[0]) <= x <= max(v1[0],v2[0])) and (min(v1_prime[0],v2_prime[0]) <= x <= max(v1_prime[0],v2_prime[0])) and \
       (min(v1[1],v2[1]) <= y <= max(v1[1],v2[1])) and (min(v1_prime[1],v2_prime[1]) <= y <= max(v1_prime[1],v2_prime[1])):
        return [x, y]
    
    return None
